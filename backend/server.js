import express from "express";
import cors from "cors";
import multer from "multer";
import path from "path";
import oracledb from "oracledb";
import fs from "fs";
import { fileURLToPath } from "url";

// Fix __dirname in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 5000;

// Enable CORS
app.use(cors());

// Serve uploaded images
app.use("/schoolimages", express.static(path.join(__dirname, "schoolimages")));

// Ensure upload folder exists
const uploadDir = path.join(__dirname, "schoolimages");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// Multer setup for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// Oracle DB connection (connect to XEPDB1, not CDB$ROOT)
const dbConfig = {
  user: process.env.DB_USER || "system",
  password: process.env.DB_PASSWORD || "civilapp", 
  connectString: process.env.DB_CONNECT ||  "localhost/XEPDB1",
};

// Create schools table if not exists
async function initDB() {
  let conn;
  try {
    conn = await oracledb.getConnection(dbConfig);

    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE schools (
          id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
          schoolname VARCHAR2(255),
          address VARCHAR2(255),
          city VARCHAR2(100),
          state VARCHAR2(100),
          contact VARCHAR2(50),
          email_id VARCHAR2(255),
          image VARCHAR2(255),
          PRIMARY KEY (id)
        )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;`
    );

    console.log("âœ… Table SCHOOLS is ready in XEPDB1");
  } catch (err) {
    console.error("DB Init Error:", err);
  } finally {
    if (conn) await conn.close();
  }
}

// API: Add new school
app.post("/add", upload.single("image"), async (req, res) => {
  let conn;
  try {
    const { schoolname, address, city, state, contact, email } = req.body;
    const image = req.file ? req.file.filename : null;

    if (!schoolname || !address || !city || !state || !contact || !email || !image) {
      return res.status(400).send("All fields are required.");
    }

    conn = await oracledb.getConnection(dbConfig);

    await conn.execute(
      `INSERT INTO schools (schoolname, address, city, state, contact, email_id, image)
       VALUES (:schoolname, :address, :city, :state, :contact, :email, :image)`,
      { schoolname, address, city, state, contact, email, image },
      { autoCommit: true }
    );

    res.status(201).send("School added successfully");
  } catch (err) {
    console.error("Insert error:", err);
    res.status(500).send("Database insert error");
  } finally {
    if (conn) await conn.close();
  }
});

// API: Fetch all schools
app.get("/schools", async (req, res) => {
  let conn;
  try {
    conn = await oracledb.getConnection(dbConfig);

    const result = await conn.execute(`SELECT * FROM schools ORDER BY id DESC`);
    res.json(result.rows);
  } catch (err) {
    console.error("Fetch error:", err);
    res.status(500).send("Database fetch error");
  } finally {
    if (conn) await conn.close();
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on port ${PORT}`);
  initDB();
});
